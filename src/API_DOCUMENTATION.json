[
	{ 
		"login_api":{
			"path": "/api/login",
			"method": "post",
			"receives": [
				{"name": "имя аккаунта"},
				{"password": "пароль аккаунта"}
			],

			"description": ["входит в аккаунт по имени аккаунта и паролю, который",
			"шифруется в md5 и сравнивается со значениями в таблице пользователей.",
			"Если успешно то пользователю дают куки для логина со сроком 2 недели,",
			"чтобы каждый раз не входить в аккаунт. Если не существует такого", 
			"пользователя, то отправляет http403 с соответствующим сообщением.",
			"Если все успешно, то отправляет redirect 302 на страницу аккаунта"]
		}
	},

	{
		"verify_email_api":{
			"path": "/api/verifyemail",
			"method": "post",
			"receives": [
				{"name": "имя аккаунта"},
				{"email": "адрес электронной почты"},
				{"password": "пароль аккаунта"}
			],

			"description": ["Отправка кода подтверждения на почту.",
			"Проверяет имя на разрешенные символы, длину и занятость имени.",
			"Пароль хэширует в md5. Если проверки не прошли, то отправляет Http400",
			"с соответствующим сообщением",
			"Если все хорошо, то генерирует рандомный код для", 
			"подтверждения почты и отправляет на почту.",
			"На почту приходит ссылка с GET запросом с именем и кодом" ,
			"Также создает запись с полученными",
			"данными в таблице неподтвержденных пользователей. Если до этого была запись",
			"в таблице с таким именем, то она удаляется", 
			"Если все успешно, то отправляет http200 с успешным сообщением"]
		}
	},

	{
		"register_account_api": {
			"path": "/api/registeraccount",
			"method": "get",
			"receives": [
				{"name": "имя аккаунта"},
				{"code": "код для подтверждения почты"}
			],

			"description": ["Регистрирует аккаунт. Находит запись с отправленными данными в таблице",
			"с неподтвержденными пользователями.",
			"Если она есть, то добавляет  новую запись в таблицу с пользователями", 
			"копируя значения полей с записи из таблицы с неподтвержденными аккаунтами. Старую",
			"запись удаляет. Также посылает куки сроком 2 недели для входа в аккаунт. Если код",
			"или имя аккаунта неверно, то отправляет http404 с сообщением.",
			"Если все успешно, то отправляет redirect 302 на страницу пользователя"]
		}
	},

	{
		"register_team_api": {
			"path": "/api/registerteam",
			"method": "post",
			"receives": [
				{"name": "имя аккаунта"},
				{"info": "дополнительная информация о команде"}
			],

			"description": ["Проверяет имя на длину, разрешенные символы, доступность имени и",
			"принадлежность пользователя к любой команде. Если проверка не пройдена, то",
			"Отправляет Http400 с сообщением об ошибке. Если проверка проходит, то удаляется",
			"анкета пользователя, все приглашения к пользователю и запросы от пользователя. Создается",
			"команда в таблице, где владельцем является данный пользователь и запись в принадлежности",
			"пользователя к команде. В конце отправляет redirect 302 на страницу команды",
			"Если пользователь не зарегистрирован, отправляет http403 с сообщением"]
		}
	},

	{
		"logout_api": {
			"path": "/api/logout",
			"method": "get",
			"receives": [],
			"description": ["Удаляет куки для входа из браузера и выходит из аккаунта.",
			"В конце отправялет redirect 302 на главную страницу"]
		}
	},

	{
		"change_user_info_api": {
			"path": "/api/changeuserinfo",
			"method": "post",
			"receives": [
				{"info": "информация о пользователе"},
				{"contacts": "контакты пользователя"}
			],

			"description": ["меняет информацию пользователя, с которого идет запрос ",
			"По окончании возвращает http302 на страницу пользователя. Если", 
			"Пользователь не зарегистрирован, то отправляется http403 с сообщением"]
		}
	},

	{
		"change_team_info_api": {
			"path": "/api/changeteaminfo",
			"method": "post",
			"receives": [
				{"info": "информация о команде"}
			],

			"description": ["Изменяет информацию о команде, владельцем которой является",
			"пользователь, с которого идет запрос на адрес. Если такой команды не нашлось",
			"То отправляется http404 с сообщением. В конце отправляет redirect на команду",
			"Если пользователь не зарегистрирован, то отправляется http403 с сообщением"]
		}
	},

	{
		"invite_api": {
			"path": "/api/invite/<name>",
			"method": "post",
			"receives": [],
			"description": ["Отправка приглашение на присоединение к команде, владельцем",
			"которой является отправитель. Если такой команды нет, то отправляется http404",
			"с соответствующим сообщением. Если пользователя с именем <name> не существует", 
			"то отправляется http404 с сообщением. Дальше провряет на то, что получатель",
			"не состоит в команде и текущего приглашения нет в базе данных, то есть отправитель",
			"не отправлял приглашение или оно было отклонено. Если эти проверки не проходят, то",
			"отправляется http400 с сообщением. Дальше проверяется, что получатель не отправлял",
			"запрос на вступление в команду текущему пользователю. Если этот запрос есть, то",
			"анкета получателя и все запросы от него и приглашения ему удаляются и создается запись",
			"в таблице принадлежности к команде. То есть получатель вступает в команду.",
			"Если запроса нет в таблице текущему пользователю от получателяприглашения, то",
			"создается запись в таблице с приглашениями. Если отправитель не зарегистрирован, то http403",
			"Если отправлено приглашение, то отправляется http200 с сообщением. Если получатель",
			"Вступил в команду, то отправляется http302 на страницу команды"]
		}
	},

	{
		"request_api": {
			"path": "/api/request/<name>",
			"method": "post",
			"receives": [],
			"description": ["Отправляет запрос на присоединение в команду пользователю с именем <name> ",
			"если такого пользователя нет, то отправляется http404 с сообщением. Если текущий пользователь ",
			"не зарегистрирован, то http403. Также провряет, чтобы данный пользователь был владельцем команды, ",
			"если он не владелец, то http404 с сообщением. Также провряется то, что текущий пользователь не ", 
			"состоит в команде и отправитель запроса не отправлял запросов данному владельцу команды, иначе http400", 
			"с сообщением. Дальше проверяется, что получатель запроса не отправлял приглашение на присоединение ", 
			"текущему пользователю. Если приглашение имеется, то текущий пользователь вступает в команду, формируется", 
			"запись в таблице принадлежности и возвращается redirect на страницу команды и анкета отправитель и все ", 
			"запросы от него и приглашения ему удаляются. Если приглашения нет, то создается запрос в таблице и ",
			"возвращается http200 с сообщением"]
		}
	},

	{
		"leave_api": {
			"path": "/api/leave",
			"method": "post",
			"receives": [],
			"description": ["текущий пользователь выходит из команды. если это был владелец то его команда",
			"удаляется и все ассоциирующие записи с командой удаляются. Запись в таблице принадлежностей удаляется ",
			"Если пользователь не авторизован, то http403. Если пользователь не состоит в команде, то http404"]
		}
	},

	{
		"kick_api": {
			"path": "/api/kick/<name>",
			"method": "post",
			"receives": [],
			"description": ["Выгнать пользователя из команды, владельцем которой является текущий ",
			"пользователь. Проверяется, чтобы нельзя было выгнать самого себя, для этого есть ",
			"leave_api. Если текущий пользователь не является владельцем команды, то http404",
			"Если пользователь не принадлежит к команде, то http404. Если не авторизован текущий то http403. ",
			"Удаляется запись принадлежности к команде пользователя <name>" ]
		}
	},

	{
		"decline_invite_api":{
			"path": "/api/declineinvite/<name>",
			"method": "post",
			"receives": [],
			"description": ["Отклоняет приглашение от данного владельца команды (name). Запись приглашения",
			"удаляется. Если пользователя не существует или он не отправлял приглашение, то http404 ",
			"Если пользователь не зарегистрирован, то http403"]
		}
	},

	{
		"decline_request_api":{
			"path": "/api/declinerequest/<name>",
			"method": "post",
			"receives": [],
			"description": ["Отклоняет запрос на вступление в команду от пользователя (name). Запись",
			"запроса удаляется. Если пользователя нет или запроса нет, то http404 с сообщением. Если ",
			"пользователь не зарегистрирован, то http403"]
		}
	},

	{
		"create_team_ad_api":{
			"path": "/api/createteamad",
			"method": "post",
			"receives": [
				{"project": "В каком направлении команда развивается или хочет развиваться"},
				{"role": "Кого команда ищет"},
				{"skills": "Какие навыки должны быть у потенциальных участников"}
			],

			"description": ["Создает анкету команды для поиска участников. Команда с анкетой будет появляться",
			"в разделе поиска команд. Если текущий пользователь не является владельцем команды, то http404 с сообщением ", 
			"если анкета существует, то она изменяется. Если пользователь не авторизован, то http403.",
			"В последствии возвращается http 302 redirect на страницу команды. Добавляется запись в таблицу"]
		}
	},

	{
		"create_user_ad_api":{
			"path": "/api/createuserad",
			"method": "post",
			"receives": [
				{"project": "В каком направлении пользователь развивается или хочет развиваться"},
				{"role": "Кем хочет быть пользователь"},
				{"skills": "Какие навыки имеет текущий искатель команды"}
			],

			"description": ["Создает анкету пользователя для поиска команды. Пользователь будет появляться ",
			"на странице искателей команды. Если пользователь состоит в команде, то возвращается http400 ",
			"с сообщением. Если пользователь не авторизован то http403. Если анкета есть, то она изменяется.",
			"В конце возвращает http302 redirect на страницу пользователя"]
		}
	},

	{
		"delete_team_ad_api":{
			"path": "/api/deleteteamad",
			"method": "post",
			"receives": [],
			"description": ["Удаляет анкету команду, владельцем которой является текущий пользователь. Если он ",
			"не авторизован, то http403. Если пользователь не является владельцем команды или анкета не найдена ",
			"то http404 с сообщением в конце http 302 redirect на страницу команды"]
		}
	},

	{
		"delete_user_ad_api":{
			"path": "/api/deleteuserad",
			"method": "post",
			"receives": [],
			"description": ["Удаляет анкету пользователя. Если пользователь не зарегистрирован то http403. ",
			"Если анкеты нет то http404 с сообщением. В конце http302 redirect на страницу пользователя"]
		}
	}
]